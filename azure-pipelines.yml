# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: DownloadSecureFile@1
  name: strongNameKey
  inputs:
    secureFile: 'Key.snk'

- task: DownloadSecureFile@1
  name: codeSigningKey
  inputs:
    secureFile: 'code_signing.pkf'
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    Contents: '**'
    TargetFolder: '$(Build.Repository.LocalPath)\$(ProjectName)'
    OverWrite: true

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CmdLine@2
  inputs:
    script: |
      dotnet tool install -g OpenVsixSignTool
      
- task: CmdLine@2
  inputs:
    script: |
      OpenVsixSignTool sign -c $(Build.Repository.LocalPath)\$(ProjectName)\code_signing.pkf -p $(CodeSigningCertPassword) --timestamp http://timestamp.digicert.com -ta sha256 -fd sha256 $(ProjectName).vsix
      
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: true
    archiveType: '7z'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

# task: VSTest@2
# inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
